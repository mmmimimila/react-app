{"version":3,"sources":["Counter.js","App.js","reportWebVitals.js","index.js"],"names":["Counter","props","console","log","useState","value","counter","setCounter","isDisabledPlus","max","isDisabledMinus","min","onClick","disabled","onChange","defaultProps","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2JAGA,SAASA,EAAQC,GACfC,QAAQC,IAAIF,GADU,MAEQG,mBAASH,EAAMI,OAFvB,mBAEfC,EAFe,KAENC,EAFM,KAWtB,IAAMC,EAAiBF,GAAWL,EAAMQ,IAClCC,EAAkBJ,GAAWL,EAAMU,IAEzC,OACE,iCACE,wBAAQC,QAZZ,WACEL,EAAWD,EAAU,IAWSO,SAAUL,EAAtC,eAGA,uBAAMM,SAAUR,EAAhB,cAA2BA,EAA3B,aACA,wBAAQM,QAbZ,WACEL,EAAWD,EAAU,IAYSO,SAAUH,EAAtC,kBAsBNV,EAAQe,aAAe,CACrBJ,KAAM,GACNF,IAAK,GACLJ,MAAO,GAIML,QCjDA,SAASgB,IACtB,OACE,8BACE,qDACqB,IACnB,cAAC,EAAD,CACEX,MAAO,EACPM,KAAM,GACNF,IAAK,GACLK,SAAU,SAACT,GACTH,QAAQC,IAAI,mFAAmBE,WCb3C,IAYeY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACZ,EAAD,MAEFa,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.1e6149a5.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction Counter(props) {\n  console.log(props);\n  const [counter, setCounter] = useState(props.value);\n\n  function increment() {\n    setCounter(counter + 1);\n  }\n  function decrement() {\n    setCounter(counter - 1);\n  }\n\n  const isDisabledPlus = counter >= props.max;\n  const isDisabledMinus = counter <= props.min;\n\n  return (\n    <span>\n      <button onClick={increment} disabled={isDisabledPlus}>\n        +\n      </button>\n      <span onChange={counter}> {counter} times </span>\n      <button onClick={decrement} disabled={isDisabledMinus}>\n        -\n      </button>\n    </span>\n  );\n}\n\n// function getCounterValue(){\n//   return\n// }\n\n// const counter = {\n//   onChange: () =>,\n// };\n\nCounter.propTypes = {\n  min: PropTypes.number,\n  max: PropTypes.number,\n  value: PropTypes.number,\n  onChange: PropTypes.func\n};\n\nCounter.defaultProps = {\n  min: -10,\n  max: 10,\n  value: 5\n  // onChange: () =>,\n};\n\nexport default Counter;\n","\nimport Counter from \"./Counter\";\n\nexport default function App() {\n  return (\n    <div>\n      <div>\n        Button was clicked{\" \"}\n        <Counter\n          value={5}\n          min={-10}\n          max={10}\n          onChange={(value) => {\n            console.log(\"новое значение:\", value);\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}